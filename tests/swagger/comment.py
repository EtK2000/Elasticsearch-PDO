# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from . import util
from .base_model_ import Model


# noinspection GrazieInspection, PyShadowingBuiltins
class Comment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, text: str = None, created_at: int = None, created_by: int = None, id: int = None,
                 is_compliance: bool = None):  # noqa: E501
        """CommentResponse - a model defined in Swagger

        :param text: The text of this CommentResponse.  # noqa: E501
        :type text: str
        :param created_at: The created_at of this CommentResponse.  # noqa: E501
        :type created_at: int
        :param created_by: The created_by of this CommentResponse.  # noqa: E501
        :type created_by: int
        :param id: The id of this CommentResponse.  # noqa: E501
        :type id: int
        :param is_compliance: The is_compliance of this CommentResponse.  # noqa: E501
        :type is_compliance: bool
        """
        self.swagger_types = {
            'text':          str,
            'created_at':    int,
            'created_by':    int,
            'id':            int,
            'is_compliance': bool
        }

        self.attribute_map = {
            'text':          'text',
            'created_at':    'created_at',
            'created_by':    'created_by',
            'id':            'id',
            'is_compliance': 'is_compliance'
        }
        self._text = text
        self._created_at = created_at
        self._created_by = created_by
        self._id = id
        self._is_compliance = is_compliance

    @classmethod
    def from_dict(cls, dikt) -> 'Comment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CommentResponse of this CommentResponse.  # noqa: E501
        :rtype: Comment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def text(self) -> str:
        """Gets the text of this CommentResponse.

        comment text  # noqa: E501

        :return: The text of this CommentResponse.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this CommentResponse.

        comment text  # noqa: E501

        :param text: The text of this CommentResponse.
        :type text: str
        """

        self._text = text

    @property
    def created_at(self) -> int:
        """Gets the created_at of this CommentResponse.

        the date that the comment was created  # noqa: E501

        :return: The created_at of this CommentResponse.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: int):
        """Sets the created_at of this CommentResponse.

        the date that the comment was created  # noqa: E501

        :param created_at: The created_at of this CommentResponse.
        :type created_at: int
        """

        self._created_at = created_at

    @property
    def created_by(self) -> int:
        """Gets the created_by of this CommentResponse.

        author name  # noqa: E501

        :return: The created_by of this CommentResponse.
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by: int):
        """Sets the created_by of this CommentResponse.

        author name  # noqa: E501

        :param created_by: The created_by of this CommentResponse.
        :type created_by: int
        """

        self._created_by = created_by

    @property
    def id(self) -> int:
        """Gets the id of this CommentResponse.

        comment id  # noqa: E501

        :return: The id of this CommentResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this CommentResponse.

        comment id  # noqa: E501

        :param id: The id of this CommentResponse.
        :type id: int
        """

        self._id = id

    @property
    def is_compliance(self) -> bool:
        """Gets the is_compliance of this CommentResponse.
        signifies if comment is compliance comment  # noqa: E501
        :return: The is_compliance of this CommentResponse.
        :rtype: bool
        """
        return self._is_compliance

    @is_compliance.setter
    def is_compliance(self, is_compliance: bool):
        """Sets the is_compliance of this CommentResponse.
        signifies if comment is compliance comment  # noqa: E501
        :param is_compliance: The is_compliance of this CommentResponse.
        :type is_compliance: bool
        """
        self._is_compliance = is_compliance
