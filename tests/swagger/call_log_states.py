# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from tests.swagger import util
from tests.swagger.base_model_ import Model


# FIXME: create a swagger file
# noinspection GrazieInspection
class CallLogStates(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, assigned_to: int = None, has_marked_transcript: bool = None, has_tagged_transcript: bool = None,
                 clean: bool = None, has_ai_tag: bool = None, status: int = None, declared: bool = None,
                 translated_by: str = None, reviewed_by: str = None, approved_by: str = None,
                 successful_call: bool = None, call_classification: int = None, has_compound_phrases: bool = None,
                 has_keyword_phrases: bool = None, has_simple_phrases: bool = None,
                 triggered: bool = False):  # noqa: E501
        """CallLogStates - a model defined in Swagger

        :param assigned_to: The assigned_to of this CallLogStates.  # noqa: E501
        :type assigned_to: int
        :param has_tagged_transcript: The has_marked_transcript of this CallLogStates.  # noqa: E501
        :type has_tagged_transcript: bool
        :param has_marked_transcript: The has_marked_transcript of this CallLogStates.  # noqa: E501
        :type has_marked_transcript: bool
        :param clean: The clean of this CallLogStates.  # noqa: E501
        :type clean: bool
        :param has_ai_tag: The has_ai_tag of this CallLogStates.  # noqa: E501
        :type has_ai_tag: bool
        :param status: The status of this CallLogStates.  # noqa: E501
        :type status: int
        :param declared: The declared of this CallLogStates.  # noqa: E501
        :type declared: bool
        :param translated_by: The translated_by of this CallLogStates.  # noqa: E501
        :type translated_by: str
        :param reviewed_by: The reviewed_by of this CallLogStates.  # noqa: E501
        :type reviewed_by: str
        :param approved_by: The approved_by of this CallLogStates.  # noqa: E501
        :type approved_by: str
        :param successful_call: The successful_call of this CallLogStates.  # noqa: E501
        :type successful_call: bool
        :param call_classification: The call_classification of this CallLogStates.  # noqa: E501
        :type call_classification: int
        :param has_compound_phrases: The has_compound_phrases of this CallLogStates.  # noqa: E501
        :type has_compound_phrases: bool
        :param has_keyword_phrases: The has_keyword_phrases of this CallLogStates.  # noqa: E501
        :type has_keyword_phrases: bool
        :param has_simple_phrases: The has_simple_phrases of this CallLogStates.  # noqa: E501
        :type has_simple_phrases: bool
        :param triggered: The triggered of this CallLogStates.  # noqa: E501
        :type triggered: bool
        """
        self.swagger_types = {
            'assigned_to':           int,
            'clean':                 bool,
            'approved_by':           str,
            'reviewed_by':           str,
            'translated_by':         str,
            'call_classification':   int,
            'successful_call':       bool,
            'status':                int,
            'declared':              bool,
            'has_compound_phrases':  bool,
            'has_keyword_phrases':   bool,
            'has_simple_phrases':    bool,
            'has_marked_transcript': bool,
            'has_tagged_transcript': bool,
            'has_ai_tag':            bool,
            'triggered':             bool
        }

        self.attribute_map = {
            'assigned_to':           'assigned_to',
            'clean':                 'clean',
            'approved_by':           'approved_by',
            'reviewed_by':           'reviewed_by',
            'translated_by':         'translated_by',
            'call_classification':   'call_classification',
            'successful_call':       'successful_call',
            'status':                'status',
            'declared':              'declared',
            'has_compound_phrases':  'has_compound_phrases',
            'has_keyword_phrases':   'has_keyword_phrases',
            'has_simple_phrases':    'has_simple_phrases',
            'has_marked_transcript': 'has_marked_transcript',
            'has_tagged_transcript': 'has_tagged_transcript',
            'has_ai_tag':            'has_ai_tag',
            'triggered':             'triggered'
        }
        self._assigned_to = assigned_to
        self._has_marked_transcript = has_marked_transcript
        self._has_tagged_transcript = has_tagged_transcript
        self._clean = clean
        self._has_ai_tag = has_ai_tag
        self._status = status
        self._declared = declared
        self._translated_by = translated_by
        self._reviewed_by = reviewed_by
        self._approved_by = approved_by
        self._call_classification = call_classification
        self._successful_call = successful_call
        self._has_compound_phrases = has_compound_phrases
        self._has_keyword_phrases = has_keyword_phrases
        self._has_simple_phrases = has_simple_phrases
        self._triggered = triggered

    @classmethod
    def from_dict(cls, dikt) -> 'CallLogStates':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CallLogStates of this CallLogStates.  # noqa: E501
        :rtype: CallLogStates
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assigned_to(self) -> int:
        """Gets the assigned_to of this CallLogStates.

        The user id of this call's assignee # noqa: E501

        :return: The assigned_to of this CallLogStates.
        :rtype: int
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to: int):
        """Sets the assigned_to of this CallLogStates.

        The user id of this call's assignee # noqa: E501

        :param assigned_to: The has_marked_transcript of this CallLogStates.
        :type assigned_to: bool
        """

        self._assigned_to = assigned_to

    @property
    def has_marked_transcript(self) -> bool:
        """Gets the has_marked_transcript of this CallLogStates.

        Indicates if the call has marked transcript lines  # noqa: E501

        :return: The has_marked_transcript of this CallLogStates.
        :rtype: bool
        """
        return self._has_marked_transcript

    @has_marked_transcript.setter
    def has_marked_transcript(self, has_marked_transcript: bool):
        """Sets the has_marked_transcript of this CallLogStates.

        Indicates if the call has marked transcript lines  # noqa: E501

        :param has_marked_transcript: The has_marked_transcript of this CallLogStates.
        :type has_marked_transcript: bool
        """

        self._has_marked_transcript = has_marked_transcript

    @property
    def has_tagged_transcript(self) -> bool:
        """Gets the has_tagged_transcript of this CallLogStates.

        Indicates if the call has tagged transcript lines  # noqa: E501

        :return: The has_tagged_transcript of this CallLogStates.
        :rtype: bool
        """
        return self._has_tagged_transcript

    @has_tagged_transcript.setter
    def has_tagged_transcript(self, has_tagged_transcript: bool):
        """Sets the has_marked_transcript of this CallLogStates.

        Indicates if the call has tagged transcript lines  # noqa: E501

        :param has_tagged_transcript: The has_tagged_transcript of this CallLogStates.
        :type has_tagged_transcript: bool
        """

        self._has_tagged_transcript = has_tagged_transcript

    @property
    def has_compound_phrases(self) -> bool:
        """Gets the has_compound_phrases of this CallLogStates.

        Indicates if the call has compound phrases  # noqa: E501

        :return: The has_compound_phrases of this CallLogStates.
        :rtype: bool
        """
        return self._has_compound_phrases

    @has_compound_phrases.setter
    def has_compound_phrases(self, has_compound_phrases: bool):
        """Sets the has_compound_phrases of this CallLogStates.

        Indicates if the call has compound phrases  # noqa: E501

        :param has_compound_phrases: The has_compound_phrases of this CallLogStates.
        :type has_compound_phrases: bool
        """

        self._has_compound_phrases = has_compound_phrases

    @property
    def has_keyword_phrases(self) -> bool:
        """Gets the has_keyword_phrases of this CallLogStates.

        Indicates if the call has keyword phrases  # noqa: E501

        :return: The has_keyword_phrases of this CallLogStates.
        :rtype: bool
        """
        return self._has_keyword_phrases

    @has_keyword_phrases.setter
    def has_keyword_phrases(self, has_keyword_phrases: bool):
        """Sets the has_keyword_phrases of this CallLogStates.

        Indicates if the call has keyword phrases  # noqa: E501

        :param has_keyword_phrases: The has_keyword_phrases of this CallLogStates.
        :type has_keyword_phrases: bool
        """

        self._has_keyword_phrases = has_keyword_phrases

    @property
    def has_simple_phrases(self) -> bool:
        """Gets the has_simple_phrases of this CallLogStates.

        Indicates if the call has simple phrases lines  # noqa: E501

        :return: The has_simple_phrases of this CallLogStates.
        :rtype: bool
        """
        return self._has_simple_phrases

    @has_simple_phrases.setter
    def has_simple_phrases(self, has_simple_phrases: bool):
        """Sets the has_simple_phrases of this CallLogStates.

        Indicates if the call has simple phrases lines  # noqa: E501

        :param has_simple_phrases: The has_simple_phrases of this CallLogStates.
        :type has_simple_phrases: bool
        """

        self._has_simple_phrases = has_simple_phrases

    @property
    def clean(self) -> bool:
        """Gets the clean of this CallLogStates.


        :return: The clean of this CallLogStates.
        :rtype: bool
        """
        return self._clean

    @clean.setter
    def clean(self, clean: bool):
        """Sets the clean of this CallLogStates.


        :param clean: The clean of this CallLogStates.
        :type clean: bool
        """

        self._clean = clean

    @property
    def has_ai_tag(self) -> bool:
        """Gets the has_ai_tag of this CallLogStates.


        :return: The has_ai_tag of this CallLogStates.
        :rtype: bool
        """
        return self._has_ai_tag

    @has_ai_tag.setter
    def has_ai_tag(self, has_ai_tag: bool):
        """Sets the has_ai_tag of this CallLogStates.


        :param has_ai_tag: The has_ai_tag of this CallLogStates.
        :type has_ai_tag: bool
        """

        self._has_ai_tag = has_ai_tag

    @property
    def status(self) -> int:
        """Gets the status of this CallLogStates.


        :return: The status of this CallLogStates.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status: int):
        """Sets the status of this CallLogStates.


        :param status: The status of this CallLogStates.
        :type status: int
        """

        self._status = status

    @property
    def declared(self) -> bool:
        """Gets the declared of this CallLogStates.


        :return: The declared of this CallLogStates.
        :rtype: bool
        """
        return self._declared

    @declared.setter
    def declared(self, declared: bool):
        """Sets the declared of this CallLogStates.


        :param declared: The declared of this CallLogStates.
        :type declared: bool
        """

        self._declared = declared

    @property
    def translated_by(self) -> str:
        """Gets the translated_by of this CallLogStates.


        :return: The translated_by of this CallLogStates.
        :rtype: str
        """
        return self._translated_by

    @translated_by.setter
    def translated_by(self, translated_by: str):
        """Sets the translated_by of this CallLogStates.


        :param translated_by: The translated_by of this CallLogStates.
        :type translated_by: str
        """

        self._translated_by = translated_by

    @property
    def reviewed_by(self) -> str:
        """Gets the reviewed_by of this CallLogStates.


        :return: The reviewed_by of this CallLogStates.
        :rtype: str
        """
        return self._reviewed_by

    @reviewed_by.setter
    def reviewed_by(self, reviewed_by: str):
        """Sets the reviewed_by of this CallLogStates.


        :param reviewed_by: The reviewed_by of this CallLogStates.
        :type reviewed_by: str
        """

        self._reviewed_by = reviewed_by

    @property
    def approved_by(self) -> str:
        """Gets the approved_by of this CallLogStates.


        :return: The approved_by of this CallLogStates.
        :rtype: str
        """
        return self._approved_by

    @approved_by.setter
    def approved_by(self, approved_by: str):
        """Sets the approved_by of this CallLogStates.


        :param approved_by: The approved_by of this CallLogStates.
        :type approved_by: str
        """

        self._approved_by = approved_by

    @property
    def successful_call(self) -> bool:
        """Gets the successful_call of this CallLogStates.


        :return: The successful_call of this CallLogStates.
        :rtype: bool
        """
        return self._successful_call

    @successful_call.setter
    def successful_call(self, successful_call: bool):
        """Sets the successful_call of this CallLogStates.


        :param successful_call: The premium_transcription_status of this CallLogStates.
        :type successful_call: bool
        """

        self._successful_call = successful_call

    @property
    def call_classification(self) -> int:
        """Gets the call_classification of this CallLogStates.


        :return: The call_classification of this CallLogStates.
        :rtype: int
        """
        return self._call_classification

    @call_classification.setter
    def call_classification(self, call_classification: int):
        """Sets the call_classification of this CallLogStates.


        :param call_classification: The call_classification of this CallLogStates.
        :type call_classification: int
        """

        self._call_classification = call_classification

    @property
    def triggered(self) -> bool:
        """Gets the triggered of this CallLogStates.


        :return: The triggered of this CallLogStates.
        :rtype: bool
        """
        return self._triggered

    @triggered.setter
    def triggered(self, triggered: bool):
        """Sets the triggered of this CallLogStates.


        :param triggered: The premium_transcription_status of this CallLogStates.
        :type triggered: bool
        """

        self._triggered = triggered
