# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from . import util
from .base_model_ import Model


# FIXME: add to swagger
# noinspection GrazieInspection
class CallsFilterRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, *, agent_username: str = None, start: datetime = None, end: datetime = None, offset: int = 0,
                 max_elements: int = 100, gmt_offset: int = None, alerts: bool = None, assigned: bool = None,
                 score_min: int = -100, score_max: int = 100, cdr_id: int = None, language_filter: List[str] = None,
                 approved_calls: bool = None, caller_number: str = None, callee_number: str = None,
                 topics: List[int] = None, call_classifications: List[int] = None, reviewed: bool = None,
                 call_tags: List[int] = None, agent_tags: List[int] = None, customer_tags: List[int] = None,
                 assign_to_me: bool = None, ai_tag: bool = None, statuses: List[int] = None,
                 assignees: List[int] = None, online: bool = None, only_approved_calls: bool = None,
                 text_to_search: str = None, compound_phrases: bool = None, simple_phrases: bool = None,
                 keywords: bool = None, duration_min: int = None, duration_max: int = None,
                 successful_calls: bool = None, sort: str = 'start', order: str = 'desc'):  # noqa: E501
        """CallsFilterRequest - a model defined in Swagger

        :param agent_username: The agent_username of this CallsFilterRequest.  # noqa: E501
        :type agent_username: str
        :param start: The start of this CallsFilterRequest.  # noqa: E501
        :type start: datetime
        :param end: The end of this CallsFilterRequest.  # noqa: E501
        :type end: datetime
        :param offset: The offset of this CallsFilterRequest.  # noqa: E501
        :type offset: int
        :param max_elements: The max_elements of this CallsFilterRequest.  # noqa: E501
        :type max_elements: int
        :param gmt_offset: The gmt_offset of this CallsFilterRequest.  # noqa: E501
        :type gmt_offset: int
        :param alerts: The alerts of this CallsFilterRequest.  # noqa: E501
        :type alerts: bool
        :param assigned: The assigned of this CallsFilterRequest.  # noqa: E501
        :type assigned: bool
        :param score_min: The score_min of this CallsFilterRequest.  # noqa: E501
        :type score_min: int
        :param score_max: The score_max of this CallsFilterRequest.  # noqa: E501
        :type score_max: int
        :param language_filter: The language_filter of this CallsFilterRequest.  # noqa: E501
        :type language_filter: List[str]
        :param approved_calls: The approved_calls of this CallsFilterRequest.  # noqa: E501
        :type approved_calls: bool
        :param caller_number: The caller_number of this CallsFilterRequest.  # noqa: E501
        :type caller_number: str
        :param callee_number: The callee_number of this CallsFilterRequest.  # noqa: E501
        :type callee_number: str
        :param call_classifications: The call_classifications of this CallsFilterRequest.  # noqa: E501
        :type call_classifications: List[int]
        :param topics: The topics of this CallsFilterRequest.  # noqa: E501
        :type topics: List[int]
        :param call_tags: The call_tags of this CallsFilterRequest.  # noqa: E501
        :type call_tags: List[int]
        :param agent_tags: The agent_tags of this CallsFilterRequest.  # noqa: E501
        :type agent_tags: List[int]
        :param customer_tags: The customer_tags of this CallsFilterRequest.  # noqa: E501
        :type customer_tags: List[int]
        :param assign_to_me: The assign_to_me of this CallsFilterRequest.  # noqa: E501
        :type assign_to_me: bool
        :param ai_tag: The ai_tag of this CallsFilterRequest.  # noqa: E501
        :type ai_tag: bool
        :param statuses: The statuses of this CallsFilterRequest.  # noqa: E501
        :type statuses: List[int]
        :param assignees: The assignees of this CallsFilterRequest.  # noqa: E501
        :type assignees: List[int]
        :param online: The online of this CallsFilterRequest.  # noqa: E501
        :type online: bool
        :param only_approved_calls: The only_approved_calls of this CallsFilterRequest.  # noqa: E501
        :type only_approved_calls: bool
        :param text_to_search: The text_to_search of this CallsFilterRequest.  # noqa: E501
        :type text_to_search: str
        :param compound_phrases: The compound_phrases of this CallsFilterRequest.  # noqa: E501
        :type compound_phrases: bool
        :param simple_phrases: The simple_phrases of this CallsFilterRequest.  # noqa: E501
        :type simple_phrases: bool
        :param keywords: The keywords of this CallsFilterRequest.  # noqa: E501
        :type keywords: bool
        :param successful_calls: The successful_calls of this CallsFilterRequest.  # noqa: E501
        :type successful_calls: bool
        :param sort: The sort of this CallsFilterRequest.  # noqa: E501
        :type sort: str
        :param order: The order of this CallsFilterRequest.  # noqa: E501
        :type order: str
        :param reviewed: The reviewed of this CallsFilterRequest.  # noqa: E501
        :type reviewed: bool
        :param cdr_id: The cdr_id of this CallsFilterRequest.  # noqa: E501
        :type cdr_id: int
        :param duration_max: The duration_max of this CallsFilterRequest.  # noqa: E501
        :type duration_max: int
        :param duration_min: The duration_min of this CallsFilterRequest.  # noqa: E501
        :type duration_min: int
        """
        self.swagger_types = {
            'agent_username':       str,
            'start':                datetime,
            'end':                  datetime,
            'offset':               int,
            'max_elements':         int,
            'gmt_offset':           int,
            'alerts':               bool,
            'assigned':             bool,
            'score_min':            int,
            'score_max':            int,
            'language_filter':      List[str],
            'approved_calls':       bool,
            'caller_number':        str,
            'callee_number':        str,
            'topics':               List[int],
            'call_classifications': List[int],
            'call_tags':            List[int],
            'agent_tags':           List[int],
            'customer_tags':        List[int],
            'assign_to_me':         bool,
            'ai_tag':               bool,
            'statuses':             List[int],
            'assignees':            List[int],
            'online':               bool,
            'only_approved_calls':  bool,
            'text_to_search':       str,
            'compound_phrases':     bool,
            'simple_phrases':       bool,
            'keywords':             bool,
            'successful_calls':     bool,
            'sort':                 str,
            'order':                str,
            'reviewed':             bool,
            'cdr_id':               int,
            'duration_max':         int,
            'duration_min':         int
        }

        self.attribute_map = {
            'agent_username':       'agent_username',
            'start':                'start',
            'end':                  'end',
            'offset':               'offset',
            'max_elements':         'max_elements',
            'gmt_offset':           'gmt_offset',
            'alerts':               'alerts',
            'assigned':             'assigned',
            'score_min':            'score_min',
            'score_max':            'score_max',
            'language_filter':      'language_filter',
            'approved_calls':       'approvedCalls',
            'caller_number':        'caller_number',
            'callee_number':        'callee_number',
            'call_classifications': 'call_classifications',
            'topics':               'topics',
            'call_tags':            'call_tags',
            'agent_tags':           'agent_tags',
            'customer_tags':        'customer_tags',
            'assign_to_me':         'assign_to_me',
            'ai_tag':               'ai_tag',
            'statuses':             'statuses',
            'assignees':            'assignees',
            'online':               'online',
            'only_approved_calls':  'only_approved_calls',
            'text_to_search':       'text_to_search',
            'compound_phrases':     'compound_phrases',
            'simple_phrases':       'simple_phrases',
            'keywords':             'keywords',
            'successful_calls':     'successful_calls',
            'sort':                 'sort',
            'order':                'order',
            'reviewed':             'reviewed',
            'cdr_id':               'cdr_id',
            'duration_max':         'duration_max',
            'duration_min':         'duration_min'
        }
        self._agent_username = agent_username
        self._start = start
        self._end = end
        self._offset = offset
        self._max_elements = max_elements
        self._gmt_offset = gmt_offset
        self._alerts = alerts
        self._assigned = assigned
        self._score_min = score_min
        self._score_max = score_max
        self._language_filter = language_filter
        self._approved_calls = approved_calls
        self._caller_number = caller_number
        self._callee_number = callee_number
        self._call_classifications = call_classifications
        self._topics = topics
        self._call_tags = call_tags
        self._agent_tags = agent_tags
        self._customer_tags = customer_tags
        self._assign_to_me = assign_to_me
        self._ai_tag = ai_tag
        self._statuses = statuses
        self._assignees = assignees
        self._online = online
        self._only_approved_calls = only_approved_calls
        self._text_to_search = text_to_search
        self._compound_phrases = compound_phrases
        self._simple_phrases = simple_phrases
        self._keywords = keywords
        self._successful_calls = successful_calls
        self._sort = sort
        self._order = order
        self._reviewed = reviewed
        self._cdr_id = cdr_id
        self._duration_max = duration_max
        self._duration_min = duration_min

    @classmethod
    def from_dict(cls, dikt) -> 'CallsFilterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CallsFilterRequest of this CallsFilterRequest.  # noqa: E501
        :rtype: CallsFilterRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_username(self) -> str:
        """Gets the agent_username of this CallsFilterRequest.

        User name of agent  # noqa: E501

        :return: The agent_username of this CallsFilterRequest.
        :rtype: str
        """
        return self._agent_username

    @agent_username.setter
    def agent_username(self, agent_username: str):
        """Sets the agent_username of this CallsFilterRequest.

        User name of agent  # noqa: E501

        :param agent_username: The agent_username of this CallsFilterRequest.
        :type agent_username: str
        """

        self._agent_username = agent_username

    @property
    def start(self) -> datetime:
        """Gets the start of this CallsFilterRequest.

        Start time to look for logs  # noqa: E501

        :return: The start of this CallsFilterRequest.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start: datetime):
        """Sets the start of this CallsFilterRequest.

        Start time to look for logs  # noqa: E501

        :param start: The start of this CallsFilterRequest.
        :type start: datetime
        """

        self._start = start

    @property
    def end(self) -> datetime:
        """Gets the end of this CallsFilterRequest.

        End time to look for logs  # noqa: E501

        :return: The end of this CallsFilterRequest.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end: datetime):
        """Sets the end of this CallsFilterRequest.

        End time to look for logs  # noqa: E501

        :param end: The end of this CallsFilterRequest.
        :type end: datetime
        """

        self._end = end

    @property
    def offset(self) -> int:
        """Gets the offset of this CallsFilterRequest.

        Location of first index for next retrieval  # noqa: E501

        :return: The offset of this CallsFilterRequest.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset: int):
        """Sets the offset of this CallsFilterRequest.

        Location of first index for next retrieval  # noqa: E501

        :param offset: The offset of this CallsFilterRequest.
        :type offset: int
        """

        self._offset = offset

    @property
    def max_elements(self) -> int:
        """Gets the max_elements of this CallsFilterRequest.

        How many elements to bring for single call(At most)  # noqa: E501

        :return: The max_elements of this CallsFilterRequest.
        :rtype: int
        """
        return self._max_elements

    @max_elements.setter
    def max_elements(self, max_elements: int):
        """Sets the max_elements of this CallsFilterRequest.

        How many elements to bring for single call(At most)  # noqa: E501

        :param max_elements: The max_elements of this CallsFilterRequest.
        :type max_elements: int
        """

        self._max_elements = max_elements

    @property
    def gmt_offset(self) -> int:
        """Gets the gmt_offset of this CallsFilterRequest.

        GMT offset in minutes  # noqa: E501

        :return: The gmt_offset of this CallsFilterRequest.
        :rtype: int
        """
        return self._gmt_offset

    @gmt_offset.setter
    def gmt_offset(self, gmt_offset: int):
        """Sets the gmt_offset of this CallsFilterRequest.

        GMT offset in minutes  # noqa: E501

        :param gmt_offset: The gmt_offset of this CallsFilterRequest.
        :type gmt_offset: int
        """

        self._gmt_offset = gmt_offset

    @property
    def alerts(self) -> bool:
        """Gets the alerts of this CallsFilterRequest.

        Indicates if the search is for cdr that has triggers  # noqa: E501

        :return: The alerts of this CallsFilterRequest.
        :rtype: bool
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts: bool):
        """Sets the alerts of this CallsFilterRequest.

        Indicates if the search is for cdr that has triggers  # noqa: E501

        :param alerts: The alerts of this CallsFilterRequest.
        :type alerts: bool
        """

        self._alerts = alerts

    @property
    def assigned(self) -> bool:
        """Gets the assigned of this CallsFilterRequest.

        Indicates if the search is for cdr that are assigned  # noqa: E501

        :return: The assigned of this CallsFilterRequest.
        :rtype: bool
        """
        return self._assigned

    @assigned.setter
    def assigned(self, assigned: bool):
        """Sets the assigned of this CallsFilterRequest.

        Indicates if the search is for cdr that are assigned  # noqa: E501

        :param assigned: The assigned of this CallsFilterRequest.
        :type assigned: bool
        """

        self._assigned = assigned

    @property
    def score_min(self) -> int:
        """Gets the score_min of this CallsFilterRequest.


        :return: The score_min of this CallsFilterRequest.
        :rtype: int
        """
        return self._score_min

    @score_min.setter
    def score_min(self, score_min: int):
        """Sets the score_min of this CallsFilterRequest.


        :param score_min: The score_min of this CallsFilterRequest.
        :type score_min: int
        """

        self._score_min = score_min

    @property
    def score_max(self) -> int:
        """Gets the score_max of this CallsFilterRequest.


        :return: The score_max of this CallsFilterRequest.
        :rtype: int
        """
        return self._score_max

    @score_max.setter
    def score_max(self, score_max: int):
        """Sets the score_max of this CallsFilterRequest.


        :param score_max: The score_max of this CallsFilterRequest.
        :type score_max: int
        """

        self._score_max = score_max

    @property
    def language_filter(self) -> List[str]:
        """Gets the language_filter of this CallsFilterRequest.


        :return: The language_filter of this CallsFilterRequest.
        :rtype: List[str]
        """
        return self._language_filter

    @language_filter.setter
    def language_filter(self, language_filter: List[str]):
        """Sets the language_filter of this CallsFilterRequest.


        :param language_filter: The language_filter of this CallsFilterRequest.
        :type language_filter: List[str]
        """

        self._language_filter = language_filter

    @property
    def approved_calls(self) -> bool:
        """Gets the approved_calls of this CallsFilterRequest.


        :return: The approved_calls of this CallsFilterRequest.
        :rtype: bool
        """
        return self._approved_calls

    @approved_calls.setter
    def approved_calls(self, approved_calls: bool):
        """Sets the approved_calls of this CallsFilterRequest.


        :param approved_calls: The approved_calls of this CallsFilterRequest.
        :type approved_calls: bool
        """

        self._approved_calls = approved_calls

    @property
    def caller_number(self) -> str:
        """Gets the caller_number of this CallsFilterRequest.


        :return: The caller_number of this CallsFilterRequest.
        :rtype: str
        """
        return self._caller_number

    @caller_number.setter
    def caller_number(self, caller_number: str):
        """Sets the caller_number of this CallsFilterRequest.


        :param caller_number: The caller_number of this CallsFilterRequest.
        :type caller_number: str
        """

        self._caller_number = caller_number

    @property
    def callee_number(self) -> str:
        """Gets the callee_number of this CallsFilterRequest.


        :return: The callee_number of this CallsFilterRequest.
        :rtype: str
        """
        return self._callee_number

    @callee_number.setter
    def callee_number(self, callee_number: str):
        """Sets the callee_number of this CallsFilterRequest.


        :param callee_number: The callee_number of this CallsFilterRequest.
        :type callee_number: str
        """

        self._callee_number = callee_number

    @property
    def call_classifications(self) -> List[int]:
        """Gets the call_classifications of this CallsFilterRequest.
        :return: The call_classifications of this CallsFilterRequest.
        :rtype: List[int]
        """
        return self._call_classifications

    @call_classifications.setter
    def call_classifications(self, call_classifications: List[int]):
        """Sets the call_classifications of this CallsFilterRequest.
        :param call_classifications: The call_tags of this CallsFilterRequest.
        :type call_classifications: List[int]
        """

        self._call_classifications = call_classifications

    @property
    def topics(self) -> List[int]:
        """Gets the topics of this CallsFilterRequest.
        :return: The topics of this CallsFilterRequest.
        :rtype: List[int]
        """
        return self._topics

    @topics.setter
    def topics(self, topics: List[int]):
        """Sets the topics of this CallsFilterRequest.
        :param topics: The call_tags of this CallsFilterRequest.
        :type topics: List[int]
        """

        self._topics = topics

    @property
    def call_tags(self) -> List[int]:
        """Gets the call_tags of this CallsFilterRequest.


        :return: The call_tags of this CallsFilterRequest.
        :rtype: List[int]
        """
        return self._call_tags

    @call_tags.setter
    def call_tags(self, call_tags: List[int]):
        """Sets the call_tags of this CallsFilterRequest.


        :param call_tags: The call_tags of this CallsFilterRequest.
        :type call_tags: List[int]
        """

        self._call_tags = call_tags

    @property
    def agent_tags(self) -> List[int]:
        """Gets the agent_tags of this CallsFilterRequest.


        :return: The agent_tags of this CallsFilterRequest.
        :rtype: List[int]
        """
        return self._agent_tags

    @agent_tags.setter
    def agent_tags(self, agent_tags: List[int]):
        """Sets the agent_tags of this CallsFilterRequest.


        :param agent_tags: The agent_tags of this CallsFilterRequest.
        :type agent_tags: List[int]
        """

        self._agent_tags = agent_tags

    @property
    def customer_tags(self) -> List[int]:
        """Gets the customer_tags of this CallsFilterRequest.


        :return: The customer_tags of this CallsFilterRequest.
        :rtype: List[int]
        """
        return self._customer_tags

    @customer_tags.setter
    def customer_tags(self, customer_tags: List[int]):
        """Sets the customer_tags of this CallsFilterRequest.


        :param customer_tags: The customer_tags of this CallsFilterRequest.
        :type customer_tags: List[int]
        """

        self._customer_tags = customer_tags

    @property
    def assign_to_me(self) -> bool:
        """Gets the assign_to_me of this CallsFilterRequest.


        :return: The assign_to_me of this CallsFilterRequest.
        :rtype: bool
        """
        return self._assign_to_me

    @assign_to_me.setter
    def assign_to_me(self, assign_to_me: bool):
        """Sets the assign_to_me of this CallsFilterRequest.


        :param assign_to_me: The assign_to_me of this CallsFilterRequest.
        :type assign_to_me: bool
        """

        self._assign_to_me = assign_to_me

    @property
    def ai_tag(self) -> bool:
        """Gets the ai_tag of this CallsFilterRequest.


        :return: The ai_tag of this CallsFilterRequest.
        :rtype: bool
        """
        return self._ai_tag

    @ai_tag.setter
    def ai_tag(self, ai_tag: bool):
        """Sets the ai_tag of this CallsFilterRequest.


        :param ai_tag: The ai_tag of this CallsFilterRequest.
        :type ai_tag: bool
        """

        self._ai_tag = ai_tag

    @property
    def statuses(self) -> List[int]:
        """Gets the statuses of this CallsFilterRequest.


        :return: The statuses of this CallsFilterRequest.
        :rtype: List[int]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses: List[int]):
        """Sets the statuses of this CallsFilterRequest.


        :param statuses: The statuses of this CallsFilterRequest.
        :type statuses: List[int]
        """

        self._statuses = statuses

    @property
    def assignees(self) -> List[int]:
        """Gets the assignees of this CallsFilterRequest.


        :return: The assignees of this CallsFilterRequest.
        :rtype: List[int]
        """
        return self._assignees

    @assignees.setter
    def assignees(self, assignees: List[int]):
        """Sets the assignees of this CallsFilterRequest.


        :param assignees: The assignees of this CallsFilterRequest.
        :type assignees: List[int]
        """

        self._assignees = assignees

    @property
    def online(self) -> bool:
        """Gets the online of this CallsFilterRequest.


        :return: The online of this CallsFilterRequest.
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online: bool):
        """Sets the online of this CallsFilterRequest.


        :param online: The online of this CallsFilterRequest.
        :type online: bool
        """

        self._online = online

    @property
    def only_approved_calls(self) -> bool:
        """Gets the only_approved_calls of this CallsFilterRequest.


        :return: The only_approved_calls of this CallsFilterRequest.
        :rtype: bool
        """
        return self._only_approved_calls

    @only_approved_calls.setter
    def only_approved_calls(self, only_approved_calls: bool):
        """Sets the only_approved_calls of this CallsFilterRequest.


        :param only_approved_calls: The only_approved_calls of this CallsFilterRequest.
        :type only_approved_calls: bool
        """

        self._only_approved_calls = only_approved_calls

    @property
    def text_to_search(self) -> str:
        """Gets the text_to_search of this CallsFilterRequest.


        :return: The text_to_search of this CallsFilterRequest.
        :rtype: str
        """
        return self._text_to_search

    @text_to_search.setter
    def text_to_search(self, text_to_search: str):
        """Sets the text_to_search of this CallsFilterRequest.


        :param text_to_search: The text_to_search of this CallsFilterRequest.
        :type text_to_search: str
        """

        self._text_to_search = text_to_search

    @property
    def compound_phrases(self) -> bool:
        """Gets the compound_phrases of this CallsFilterRequest.
        :return: The compound_phrases of this CallsFilterRequest.
        :rtype: bool
        """
        return self._compound_phrases

    @compound_phrases.setter
    def compound_phrases(self, compound_phrases: bool):
        """Sets the compound_phrases of this CallsFilterRequest.
        :param compound_phrases: The compound_phrases of this CallsFilterRequest.
        :type compound_phrases: bool
        """
        self._compound_phrases = compound_phrases

    @property
    def simple_phrases(self) -> bool:
        """Gets the simple_phrases of this CallsFilterRequest.
        :return: The simple_phrases of this CallsFilterRequest.
        :rtype: bool
        """
        return self._simple_phrases

    @simple_phrases.setter
    def simple_phrases(self, simple_phrases: bool):
        """Sets the simple_phrases of this CallsFilterRequest.
        :param simple_phrases: The simple_phrases of this CallsFilterRequest.
        :type simple_phrases: bool
        """
        self._simple_phrases = simple_phrases

    @property
    def keywords(self) -> bool:
        """Gets the keywords of this CallsFilterRequest.
        :return: The keywords of this CallsFilterRequest.
        :rtype: bool
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords: bool):
        """Sets the simple_phrases of this CallsFilterRequest.
        :param keywords: The keywords of this CallsFilterRequest.
        :type keywords: bool
        """
        self._keywords = keywords

    @property
    def successful_calls(self) -> bool:
        """Gets the successful_calls of this CallsFilterRequest.
        :return: The successful_calls of this CallsFilterRequest.
        :rtype: bool
        """
        return self._successful_calls

    @successful_calls.setter
    def successful_calls(self, successful_calls: bool):
        """Sets the successful_calls of this CallsFilterRequest.
        :param successful_calls: The successful_calls of this CallsFilterRequest.
        :type successful_calls: bool
        """
        self._successful_calls = successful_calls

    @property
    def sort(self) -> str:
        """Gets the sort of this CallsFilterRequest.
        :return: The sort of this CallsFilterRequest.
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort: str):
        """Sets the sort of this CallsFilterRequest.
        :param sort: The sort of this CallsFilterRequest.
        :type sort: str
        """
        self._sort = sort

    @property
    def order(self) -> str:
        """Gets the order of this CallsFilterRequest.
        :return: The order of this CallsFilterRequest.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order: str):
        """Sets the order of this CallsFilterRequest.
        :param order: The order of this CallsFilterRequest.
        :type order: str
        """
        self._order = order

    @property
    def reviewed(self) -> bool:
        """Gets the reviewed of this CallsFilterRequest.
        :return: The reviewed of this CallsFilterRequest.
        :rtype: bool
        """
        return self._reviewed

    @reviewed.setter
    def reviewed(self, reviewed: bool):
        """Sets the reviewed of this CallsFilterRequest.
        :param reviewed: The reviewed of this CallsFilterRequest.
        :type reviewed: bool
        """
        self._reviewed = reviewed

    @property
    def cdr_id(self) -> int:
        """Gets the cdr_id of this CallsFilterRequest.
        :return: The cdr_id of this CallsFilterRequest.
        :rtype: int
        """
        return self._cdr_id

    @cdr_id.setter
    def cdr_id(self, cdr_id: int):
        """Sets the cdr_id of this CallsFilterRequest.
        :param cdr_id: The cdr_id of this CallsFilterRequest.
        :type cdr_id: int
        """
        self._cdr_id = cdr_id

    @property
    def duration_max(self) -> int:
        """Gets the duration_max of this CallsFilterRequest.
        :return: The duration_max of this CallsFilterRequest.
        :rtype: int
        """
        return self._duration_max

    @duration_max.setter
    def duration_max(self, duration_max: int):
        """Sets the duration_max of this CallsFilterRequest.
        :param duration_max: The cdr_id of this CallsFilterRequest.
        :type duration_max: int
        """
        self._duration_max = duration_max

    @property
    def duration_min(self) -> int:
        """Gets the duration_min of this CallsFilterRequest.
        :return: The duration_min of this CallsFilterRequest.
        :rtype: int
        """
        return self._duration_min

    @duration_min.setter
    def duration_min(self, duration_min: int):
        """Sets the duration_min of this CallsFilterRequest.
        :param duration_min: The cdr_id of this CallsFilterRequest.
        :type duration_min: int
        """
        self._duration_min = duration_min
